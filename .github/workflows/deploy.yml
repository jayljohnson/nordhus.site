name: Deploy Jekyll site to Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.11'
  RUBY_VERSION: '3.1'
  ENABLE_PHOTO_MONITORING: 'false'  # Set to 'true' to enable photo monitoring

jobs:
  # Code quality checks job (runs on all pushes and PRs)
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff pytest pytest-cov requests python-dotenv cloudinary
        
    - name: Code quality check
      run: |
        echo "Checking code formatting..."
        ruff format scripts/ tests/ --check --diff
        echo "Running linter..."
        ruff check scripts/ tests/ --output-format=github
        
    - name: Run tests
      run: |
        echo "Running tests..."
        python -m pytest tests/ -v --tb=short
        echo "Cleaning up test artifacts..."
        rm -rf ./assets/images/*test-project* ./_posts/*test-project* 2>/dev/null || true
        
    - name: Test coverage
      run: |
        echo "Running test coverage..."
        python -m pytest tests/ --cov --cov-report=term-missing
        
    - name: Monitor construction projects
      run: |
        echo "Checking for construction project updates..."
        PYTHONPATH=scripts python scripts/workflows/construction_monitor.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
        ENABLE_PHOTO_MONITORING: 'true'

  # Build job (runs on all pushes and PRs)
  build:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    - name: Build with Jekyll
      run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path || '' }}"
      env:
        JEKYLL_ENV: production

  # Deploy job (only runs on main branch pushes)
  deploy:
    runs-on: ubuntu-latest
    needs: [code-quality, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v4

    - name: Build with Jekyll
      run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
      env:
        JEKYLL_ENV: production

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: success()